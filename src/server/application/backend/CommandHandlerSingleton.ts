import aggregateFactory from './AggregateFactorySingleton.js';
import { TCommand } from '../../domain/shared/types/index.js';
import { CRAWL_COMMAND } from '../../domain/shared/commands/CrawlCommand.js';
import { SELECT_RANDOM_IMAGE_COMMAND } from '../../domain/shared/commands/SelectRandomImageCommand.js';
import RetrieveImageCommand, { RETRIEVE_IMAGE_COMMAND } from '../../domain/shared/commands/RetrieveImageCommand.js';
import { TRAVERSE_LIBRARY_COMMAND } from '../../domain/shared/commands/TraverseLibraryCommand.js';

import broker from '../../infrastructure/broker/Broker.js'; // Singleton instance

/**
 * Singleton class that orchestrates the application backend command handler.
 * 
 * It initializes the application backend command handler by bootstrapping the event handlers.
 */
class CommandHandlerSingleton {

    eventHandlers: any;

    constructor() {
        this.eventHandlers = {
            [SELECT_RANDOM_IMAGE_COMMAND]: () => aggregateFactory.createSelectRandomImage(),
            [RETRIEVE_IMAGE_COMMAND]: (command: RetrieveImageCommand) => {
                if (command.payload.mediaType === "comics") return aggregateFactory.createRetrieveComicImage();
                else if (command.payload.mediaType === "games") return aggregateFactory.createRetrieveGamesCover();
                else return aggregateFactory.createRetrieveMediaCover();
            },
            [CRAWL_COMMAND]: () => aggregateFactory.createCrawlComics(),
            [TRAVERSE_LIBRARY_COMMAND]: () => aggregateFactory.createTraverseLibrary(),
        };
    }

    /**
     * Bootstraps the application backend command handler.
     * 
     * It subscribes to the broker for the supported command types and handles them.
     */
    bootstrap() {
        broker.sub(SELECT_RANDOM_IMAGE_COMMAND, command => this.#handle(command));
        broker.sub(RETRIEVE_IMAGE_COMMAND, command => this.#handle(command));
        broker.sub(CRAWL_COMMAND, command => this.#handle(command));
    }

    /**
     * Handles the command by delegating it to the appropriate event handler.
     * 
     * @param command The command to handle.
     * @returns The events generated by the event handler.
     */
    async #handle(command: TCommand) {
        if (!this.eventHandlers[command.type]) {
            throw new Error(`Unsupported command type: ${command.type}`);
        }
    
        try {
            const handler = this.eventHandlers[command.type](command);
            let events = await handler.consume(command);
            if (!Array.isArray(events)) events = [events];
            for (const event of events) broker.pub(event);
        } catch (error: any) {
            broker.pub(error.event);
            delete error.event;
            // Optionally rethrow or handle the error
        }
    }    
}

export default new CommandHandlerSingleton(); // Singleton instance through ES6 module caching