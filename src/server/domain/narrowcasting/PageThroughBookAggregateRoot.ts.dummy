/**
 * Aggregate root for paging through a specific book
 * 
 * @class PageThroughBookAggregateRoot
 */
export default class PageThroughBookAggregateRoot {
    
    private bookService: BookService;

    // TODO: ! Finish implementing

    constructor(private pageThroughBookRepository: PageThroughBookRepository) {
        this.bookService = new BookService();
    }

    /**
     * Consumes a command to page through a specific book
     * 
     * @param {NextPageInBookCommand | PreviousPageInBookCommand} command
     * @returns {(Promise<LibraryTraversedEvent | LibraryTraversalFailedEvent>)}
     * @memberof TraverseLibraryAggregateRoot
     */
    async consume(command: NextPageInBookCommand | PreviousPageInBookCommand): Promise<ImageRetrievedEvent | PageThroughBookFailedEvent> {
        
        try {
            // Logic to page through a book

            // Return a business event
            return new ImageRetrievedEvent({ userId, mediaType, image: optimizedImage, contentType, url });
        } catch (error: any) {
            // Return failure event
            const event = new PageThroughBookFailedEvent(error.message, error.url);
            error.event = event;
            return event;
            // throw error;
        }
    }
}
